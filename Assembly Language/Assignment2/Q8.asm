[org 0x100]
JMP START
 
;;MULTIPLICAND
;;the number is 0x0000 0000 0000 0000 0000 0000 0000 5A10
;;number is stored in little endian form of 128 bit
;;in memory number will be 105A 0000 0000 0000 0000 0000 0000 0000 
 NUM1_BIT_0_15		:	DW	0XA988
 NUM1_BIT_16_31		:	DW	0XFEDC
 NUM1_BIT_32_47		:	DW	0XEF97
 NUM1_BIT_48_63		:	DW	0XABCD 
 
 NUM1_BIT_64_79		:	DW	0X0000
 NUM1_BIT_80_95		:	DW	0X0000
 NUM1_BIT_96_111	:	DW	0X0000
 NUM1_BIT_112_127	:	DW	0X0000  

 
 ;;MULTIPLIER 64 BIT NUMBER
 NUM2_BIT_0_15		:	DW	0X1F00
 NUM2_BIT_16_31		:	DW	0XFF01
 NUM2_BIT_32_47		:	DW	0XFFFF
 NUM2_BIT_48_63		:	DW	0X000F

 ;;RESULT 128 BIT NUMBER
 RESULT_BIT_0_15	:	DW	0X0000
 RESULT_BIT_16_31	:	DW	0X0000
 RESULT_BIT_32_47	:	DW	0X0000
 RESULT_BIT_48_63	:	DW	0X0000
 
 RESULT_BIT_64_79	:	DW	0X0000
 RESULT_BIT_80_95	:	DW	0X0000
 RESULT_BIT_96_111	:	DW	0X0000
 RESULT_BIT_112_127	:	DW	0X0000
 
START:
	MOV CX,64
	MOV BX,1
CHECKBIT:
	AND BX,[NUM2_BIT_0_15]
	JZ SKIP
	
	MOV AX,[NUM1_BIT_0_15]
	ADD [RESULT_BIT_0_15],AX
	
	MOV AX,[NUM1_BIT_16_31]
	ADC [RESULT_BIT_16_31],AX
	
	MOV AX,[NUM1_BIT_32_47]
	ADC [RESULT_BIT_32_47],AX
	
	MOV AX,[NUM1_BIT_48_63]
	ADC [RESULT_BIT_48_63],AX
	
	MOV AX,[NUM1_BIT_64_79]
	ADC [RESULT_BIT_64_79],AX
	
	MOV AX,[NUM1_BIT_80_95]
	ADC [RESULT_BIT_80_95],AX
	
	MOV AX,[NUM1_BIT_96_111]
	ADC [RESULT_BIT_96_111],AX
	
	MOV AX,[NUM1_BIT_112_127]
	ADC [RESULT_BIT_112_127],AX ;;EXTENDED 128BIT ADDITION
	
SKIP:
	SHL WORD[NUM1_BIT_0_15  ],1
	RCL WORD[NUM1_BIT_16_31 ],1
	RCL WORD[NUM1_BIT_32_47 ],1
	RCL WORD[NUM1_BIT_48_63 ],1
	
	RCL WORD[NUM1_BIT_64_79  ],1
	RCL WORD[NUM1_BIT_80_95  ],1
	RCL WORD[NUM1_BIT_96_111 ],1
	RCL WORD[NUM1_BIT_112_127],1 ;; EXTENDED 128 BIT SHL

	SHR WORD[NUM2_BIT_48_63 ],1
	RCR WORD[NUM2_BIT_32_47 ],1
	RCR WORD[NUM2_BIT_16_31 ],1
	RCR WORD[NUM2_BIT_0_15  ],1 ;; EXTENDED 64 BIT SHR
	
	MOV BX,1
	
	DEC CX
	JNZ CHECKBIT


mov ax,0x4c00
int 0x21

;;NOTE : ALL RESULTS ARE STORED IN LITTLE ENDIAN FORM

